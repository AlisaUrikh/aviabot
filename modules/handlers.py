from aiogram import types, Dispatcher
from aiogram.filters import Command
from modules.keyboards import keyboard
from modules.api import get_iata_code, get_popular_directions, get_tickets
from config import MONTHS
import asyncio
from datetime import datetime
from logger import logger

dp = Dispatcher()

user_data = {}

# –°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
@dp.message(Command('start'))
async def start_command(message: types.Message):
    await message.answer('–ü—Ä–∏–≤–µ—Ç! –Ø - –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –≤ –ø–æ–∏—Å–∫–µ –∞–≤–∏–∞–±–∏–ª–µ—Ç–æ–≤. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü–æ–º–æ—â—å" –∏–ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /help , –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å, –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º', reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –∏ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–º–æ—â—å"
@dp.message(Command('help'))
@dp.message(lambda message: message.text == '–ü–æ–º–æ—â—å')
async def help (message: types.Message):
    await message.answer('–î–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ –∫–Ω–æ–ø–∫–∏.\n'
        '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n'
        '/start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n'
        '/help ‚Äî —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n'
        '/find_tickets ‚Äî –ø–æ–∏—Å–∫ –±–∏–ª–µ—Ç–æ–≤\n'
        '/popular_directions ‚Äî —Å–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –ø–µ—Ä–µ–ª—ë—Ç–æ–≤'
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –∏ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è"
@dp.message(Command('popular_directions'))
@dp.message(lambda message: message.text == '–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è')
async def get_directions(message: types.Message):
    user_id = message.from_user.id
    user_data[user_id] = {}
    user_data[user_id]['step'] = 'popular_directions'
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è ‚úàÔ∏è')

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –∏ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ò—Å–∫–∞—Ç—å –±–∏–ª–µ—Ç—ã"
@dp.message(Command('find_tickets'))
@dp.message(lambda message: message.text == '–ò—Å–∫–∞—Ç—å –±–∏–ª–µ—Ç—ã')
async def find_tickets(message: types.Message):
    user_id = message.from_user.id
    user_data[user_id] = {}
    await message.answer('–°–µ–π—á–∞—Å –±–æ—Ç –∑–∞–¥–∞—Å—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –æ –≥–æ—Ä–æ–¥–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –ø—É–Ω–∫—Ç–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–º –í–∞—Å –º–µ—Å—è—Ü–µ –¥–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è. –ó–∞—Ç–µ–º –æ–Ω –Ω–∞–π–¥—ë—Ç –∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–π—Å—ã –∑–∞ –≤–µ—Å—å —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Ü–µ–Ω. –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–∏–±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –æ—Ç–≤–µ—á–∞–π—Ç–µ —á—ë—Ç–∫–æ –∏ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –í–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞')
    await asyncio.sleep(3)
    await message.answer('–û—Ç–ª–∏—á–Ω–æ, –Ω–∞—á–Ω–µ–º –ø–æ–∏—Å–∫! ‚úàÔ∏è  –ò–∑ –∫–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –í—ã –ª–µ—Ç–∏—Ç–µ?')
    user_data[user_id]['step'] = 'origin'

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
@dp.message(lambda message: message.text.startswith('/'))
async def unknown_command(message: types.Message):
    logger.error('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞')
    await message.answer('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ù–∞–ø–∏—à–∏—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥')
    
# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def get_info(message: types.Message):
    user_id = message.from_user.id
    step = user_data[user_id].get('step')
    if step == 'popular_directions':
        city_name = message.text
        iata_code_origin = get_iata_code(city_name)
        if not iata_code_origin:
            logger.warning(f'–ì–æ—Ä–æ–¥ "{city_name}" –Ω–µ –Ω–∞–π–¥–µ–Ω')
            await message.answer('‚ùå –ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ')
            return
        await message.answer('üîç –ò—â—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è...')
        directions = get_popular_directions(iata_code_origin)
        await message.answer(directions)
        user_data[user_id]['step'] = None
        return

    elif step == 'origin':
        origin = message.text
        iata_code_origin = get_iata_code(origin)
        if not iata_code_origin:
            logger.warning(f'–ì–æ—Ä–æ–¥ "{origin}" –Ω–µ –Ω–∞–π–¥–µ–Ω')
            await message.answer('‚ùå –û—à–∏–±–∫–∞! –í–æ–∑–º–æ–∂–Ω–æ –≤ –∑–∞–ø—Ä–æ—Å–µ –¥–æ–ø—É—â–µ–Ω–∞ –æ–ø–µ—á–∞—Ç–∫–∞, –∏–ª–∏ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ –Ω–µ—Ç –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –≤–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞')
            return
        user_data[user_id]['origin'] = origin
        user_data[user_id]['iata_code_origin'] = iata_code_origin
        await message.answer('–•–æ—Ä–æ—à–æ! –ö—É–¥–∞ –Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç–µ—Å—å?')
        user_data[user_id]['step'] = 'destination'
        return

    elif step == 'destination':
        destination = message.text
        if destination == user_data[user_id]['origin']:
            logger.warning(f'–ì–æ—Ä–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –ø—Ä–∏–±—ã—Ç–∏—è —Å–æ–≤–ø–∞–¥–∞—é—Ç')
            await message.answer ('‚ùå –û—à–∏–±–∫–∞! –ì–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –ø—É–Ω–∫—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã —Ä–∞–∑–ª–∏—á–∞—Ç—å—Å—è. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥')
            return
        user_data[user_id]['destination'] = message.text
        iata_code_destination = get_iata_code(message.text)
        if not iata_code_destination:
            logger.warning(f'–ì–æ—Ä–æ–¥ "{destination}" –Ω–µ –Ω–∞–π–¥–µ–Ω')
            await message.answer ('‚ùå –û—à–∏–±–∫–∞! –í–æ–∑–º–æ–∂–Ω–æ, –≤ –∑–∞–ø—Ä–æ—Å–µ –¥–æ–ø—É—â–µ–Ω–∞ –æ–ø–µ—á–∞—Ç–∫–∞, –∏–ª–∏ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ –Ω–µ—Ç –∞—ç—Ä–æ–ø–æ—Ä—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –≤–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞')
            return
        user_data[user_id]['iata_code_destination'] = iata_code_destination
        await message.answer('üìÖ –í –∫–∞–∫–æ–º –º–µ—Å—è—Ü–µ –í—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ø–æ–ª—ë—Ç? –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞ –∏–ª–∏ –µ–≥–æ —á–∏—Å–ª–æ–≤–æ–µ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ú–∞—Ä—Ç –∏–ª–∏ 03)')
        user_data[user_id]['step'] = 'date'
        return

    else:
        current_year = datetime.now().year
        month = message.text
        if month.isdigit():
            if int(month) < 1 or int(month) > 12:
                logger.warning(f'–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–≤–µ–¥–µ–Ω –Ω–æ–º–µ—Ä –º–µ—Å—è—Ü–∞: {month}')
                await message.answer('‚ùå –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –º–µ—Å—è—Ü–∞ (–æ—Ç 01 –¥–æ 12)')
                return
        elif month in MONTHS:
            month = MONTHS[month]
        else:
            logger.warning(f'–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–≤–µ–¥–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞: {month}')
            await message.answer('‚ùå –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –Ω–æ–º–µ—Ä –º–µ—Å—è—Ü–∞ (–æ—Ç 01 –¥–æ 12)')
            return
        formatted_date = f'{current_year}-{month}-01'
        user_data[user_id]['date'] = formatted_date
        origin = user_data[user_id]['origin']
        destination = user_data[user_id]['destination']
        date = user_data[user_id]['date']
        iata_code_origin = user_data[user_id]['iata_code_origin']
        iata_code_destination = user_data[user_id]['iata_code_destination']
        await message.answer(f'üìç –ú–∞—Ä—à—Ä—É—Ç: {iata_code_origin} ‚Üí {iata_code_destination}\nüîç –ò—â—É –±–∏–ª–µ—Ç—ã...')

        tickets_info = get_tickets(iata_code_origin, iata_code_destination, date)
        await message.answer(tickets_info)
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –∫–æ–º–∞–Ω–¥—É')
